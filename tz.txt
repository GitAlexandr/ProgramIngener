Требования к проекту:
- Упаковка проекта в докер-компоуз и запуск через docker compose up без дополнительной настройки
- прохождение flake8 + mypy в соответствии с конфигурациями проекта
- Кеширование всего, что возможно закешировать через redis
- Тесты - rollback транзакций фикстур вместо удаления.
- Минимальные данные при разворачивании проекта (фикстуры, сиды)
- Метрики: 
  - На кол-во полученных запросов в разрезе каждой ручки.
  - На кол-во ошибок по каждой ручке
  - На кол-во отправленных запросов
  - Время выполнения каждой ручки в среднем (гистограмма)
  - Время выполнения всех интеграционных методов (запросы в бд, редис и тп (гистограмма))
- Валидация входящих данных
- Настройки в env
- Без дублирования кода
- Обработка ошибок и соответствующие статусы ответов
- Логирование с возможностью переключать уровень дебага. Должны быть логи для отладки так и для info
- Сама сущность пользователей и авторизация + аутентификация
- В README.md ожидается увидеть как что работает, чтобы можно было ознакомиться проще с проектом
- Ну и самое главное - проект должен поднимать без костылей через docker compose up либо инструкция в README.md


Шаги выполнения проекта в соответствии с требованиями:

1. Подготовка окружения
Установить Docker и Docker Compose.
Создать проект с базовой структурой.
2. Настройка окружения через env
Создать файл .env с необходимыми настройками (например, база данных, редис, настройки логирования).
3. Создание Docker-Compose файла
Написать Dockerfile для каждого сервиса.
Создать docker-compose.yml с настройками для приложения, базы данных, и Redis.
Убедиться, что все настройки из env файла подтягиваются в контейнеры.
4. Разработка приложения
Создать основные директории проекта: app, tests, config.
Написать код приложения, включая сущность пользователей, авторизацию и аутентификацию.
5. Валидация входящих данных
Реализовать валидацию входящих данных для всех эндпоинтов.
6. Логирование
Настроить логирование с возможностью изменения уровня дебага.
Включить логирование для отладки и информационных целей.
7. Обработка ошибок
Реализовать обработку ошибок для всех ручек и возвращение соответствующих статусов ответов.
8. Упаковка в Docker
Добавить инструкции Docker в каждый Dockerfile.
Создать docker-compose.yml для сборки и запуска всех контейнеров.
9. Тестирование
Написать тесты для проверки функциональности эндпоинтов.
Использовать pytest для тестирования.
Реализовать rollback транзакций фикстур вместо удаления.
10. Кеширование
Внедрить кеширование в приложение с использованием Redis.
11. Метрики
Добавить сбор метрик с помощью инструментов, таких как Prometheus.
Реализовать метрики на количество запросов, количество ошибок, количество отправленных запросов, время выполнения ручек.
12. README.md
Написать подробное описание того, как установить, настроить и запустить проект.
Добавить примеры запросов и ожидаемых ответов для каждого эндпоинта.
Включить информацию о метриках и логировании.
Предоставить инструкции по развертыванию проекта с помощью Docker Compose.
13. Оптимизация и финальная проверка
Оптимизировать код, устранить дублирование.
Проверить, что проект поднимается без дополнительной настройки через docker compose up.
14. Завершение
Проверить выполнение всех требований.
Добавить возможность использования проекта без костылей через docker compose up.
Зафиксировать зависимости в файле requirements.txt.